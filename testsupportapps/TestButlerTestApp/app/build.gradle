apply plugin: 'com.android.application'
apply plugin: 'jacoco'
jacoco {
    toolVersion = '0.7.5.201505241946'
}
android {
    compileSdkVersion 28
    buildToolsVersion "28.0.3"
    defaultConfig {
        applicationId "com.linkedin.mdctest"
        minSdkVersion 15
        targetSdkVersion 25
        versionCode 1
        versionName "1.0"
        // Follow the recommended usage of test butler service and have setup test butler service in the test runner
        testInstrumentationRunner "com.linkedin.mdctest.TestButlerTestRunner"
    }
    buildTypes {
        release {
            minifyEnabled false
            proguardFiles getDefaultProguardFile('proguard-android.txt'), 'proguard-rules.pro'
        }
        debug {
	    testCoverageEnabled false
        }
    }
    lintOptions {
        abortOnError false
    }
}

dependencies {
    implementation fileTree(include: ['*.jar'], dir: 'libs')
    androidTestImplementation('com.android.support.test.espresso:espresso-core:2.2.2', {
        exclude group: 'com.android.support', module: 'support-annotations'
    })
    implementation 'com.android.support:appcompat-v7:25.3.0'
    implementation 'com.android.support.constraint:constraint-layout:1.0.2'
    implementation 'com.android.support:design:25.2.0'
    testImplementation 'junit:junit:4.12'
}



task jacocoTestReport(type: JacocoReport) {
    group = "Reporting"
    description = "Generate Jacoco coverage reports after running tests."
    reports {
        xml.enabled true
        xml.destination "../build/reports/coverage/jacoco.xml"
        html.enabled true
        html.destination "../build/reports/coverage/html"
    }

    classDirectories = fileTree(
            dir: "$project.buildDir/intermediates/classes/",
            exclude: ['**/R*.class',
                       '**/R$*.class',
                       '**/*$InjectAdapter.class',
                       '**/*$ModuleAdapter.class',
                       '**/*$ViewInjector*.class',
                       '**/androidTest/**',
                       '**/test/**'
            ])
    def coverageSourceDirs = [
            'src/main/java',
    ]

    sourceDirectories = files(coverageSourceDirs)
    additionalSourceDirs = files(coverageSourceDirs)


    if (project.hasProperty('coverageFiles')) {
        // convert the comma separated string to an array to create an aggregate report from
        // multiple coverage.ec files
        def coverageFilesArray = coverageFiles.split(',')
        executionData = files(coverageFilesArray)
    }else if (project.hasProperty('coverageDir')) {
        println coverageDir
        executionData = fileTree (
                dir: coverageDir,
                include: "**/*.ec"
        )
    }
    else {
        executionData = files('build/outputs/code-coverage/connected/coverage.ec')
    }

    doFirst {
        new File("$project.buildDir/intermediates/classes/").eachFileRecurse { file ->
            if (file.name.contains('$$')) {
                file.renameTo(file.path.replace('$$', '$'))
            }
        }
    }
}
